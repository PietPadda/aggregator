// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollows = `-- name: CreateFeedFollows :one

WITH inserted_feed_follow AS (
    -- insert into table
    INSERT INTO feed_follows (
        id,
        created_at,
        updated_at,
        user_id,
        feed_id
    )
    -- value placeholders
    VALUES (
        $1, $2, $3, $4, $5
    ) RETURNING id, created_at, updated_at, user_id, feed_id -- return after insert (populates the CTE record!)
)
SELECT
    iff.id,
    iff.created_at,
    iff.updated_at,
    iff.user_id,
    iff.feed_id,
    u.name AS userName,
    f.name AS feedName
FROM inserted_feed_follow iff
INNER JOIN users u ON u.id = iff.user_id
INNER JOIN feeds f ON f.id = iff.feed_id
`

type CreateFeedFollowsParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
}

type CreateFeedFollowsRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
	Username  string
	Feedname  string
}

// feed_follows.sql
// create new record using WITH CTE pattern
// select the record data and user and feed name from inserted_feed_follow
// inner join users (omit other users)
// inner join feeds (omit other feeds)
func (q *Queries) CreateFeedFollows(ctx context.Context, arg CreateFeedFollowsParams) (CreateFeedFollowsRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollows,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i CreateFeedFollowsRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.Username,
		&i.Feedname,
	)
	return i, err
}

const deleteFeedFollowByUserAndFeed = `-- name: DeleteFeedFollowByUserAndFeed :one
DELETE FROM feed_follows ff
USING feeds f
WHERE f.url = $1         -- matches url
  AND ff.user_id = $2    -- matches user_id
  AND ff.feed_id = f.id  -- feed follow id matches feed id
RETURNING ff.id, ff.created_at, ff.updated_at, ff.user_id, ff.feed_id
`

type DeleteFeedFollowByUserAndFeedParams struct {
	Url    string
	UserID uuid.UUID
}

// delete feed follow record by url for a user
// using feeds table (PostgreSQL doesn't support inner join on delete)
// where clause to filter record
func (q *Queries) DeleteFeedFollowByUserAndFeed(ctx context.Context, arg DeleteFeedFollowByUserAndFeedParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, deleteFeedFollowByUserAndFeed, arg.Url, arg.UserID)
	var i FeedFollow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
	)
	return i, err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
SELECT
    ff.id,
    ff.created_at,
    ff.updated_at,
    ff.user_id,
    ff.feed_id,
    u.name AS userName,
    f.name AS feedName
FROM feed_follows ff
INNER JOIN users u ON u.id = ff.user_id
INNER JOIN feeds f ON f.id = ff.feed_id
WHERE ff.user_id = $1
ORDER BY ff.created_at DESC
`

type GetFeedFollowsForUserRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
	Username  string
	Feedname  string
}

// get all feed follows for a user
// inner join users (omit other users)
// inner join feeds (omit other feeds)
// where clause to filter by user_id
// order by created_at descending (otherwise random with where clause)
func (q *Queries) GetFeedFollowsForUser(ctx context.Context, userID uuid.UUID) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FeedID,
			&i.Username,
			&i.Feedname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
