// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feeds.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one

INSERT INTO feeds (id, created_at, updated_at, name, url, user_id)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
RETURNING id, created_at, updated_at, name, url, user_id, last_fetched_at
`

type CreateFeedParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	UserID    uuid.UUID
}

// feeds.sql
func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetchedAt,
	)
	return i, err
}

const getFeedByURL = `-- name: GetFeedByURL :one
SELECT id, created_at, updated_at, name, url, user_id
FROM feeds
WHERE url = $1 -- url to match the inputy
LIMIT 1
`

type GetFeedByURLRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	UserID    uuid.UUID
}

func (q *Queries) GetFeedByURL(ctx context.Context, url string) (GetFeedByURLRow, error) {
	row := q.db.QueryRowContext(ctx, getFeedByURL, url)
	var i GetFeedByURLRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const getNextFeedToFetch = `-- name: GetNextFeedToFetch :one

SELECT id, created_at, updated_at, name, url, user_id, last_fetched_at FROM feeds          -- we return ALL cols for ScrapeFeeds
ORDER BY last_fetched_at ASC -- from oldest to newest
NULLS FIRST                   -- any null fetched at record first, these are EVEN older!
LIMIT 1
`

// use feed_id (unique as it's a pk)
func (q *Queries) GetNextFeedToFetch(ctx context.Context) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getNextFeedToFetch)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetchedAt,
	)
	return i, err
}

const listFeedsWithCreator = `-- name: ListFeedsWithCreator :many
SELECT f.name AS feedName, f.url AS feedURL, u.name AS userName
FROM feeds f INNER JOIN users u
ON u.id = f.user_id
`

type ListFeedsWithCreatorRow struct {
	Feedname string
	Feedurl  string
	Username string
}

func (q *Queries) ListFeedsWithCreator(ctx context.Context) ([]ListFeedsWithCreatorRow, error) {
	rows, err := q.db.QueryContext(ctx, listFeedsWithCreator)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFeedsWithCreatorRow
	for rows.Next() {
		var i ListFeedsWithCreatorRow
		if err := rows.Scan(&i.Feedname, &i.Feedurl, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markFeedFetched = `-- name: MarkFeedFetched :exec

UPDATE feeds
SET
  updated_at = NOW(),
  last_fetched_at = NOW()
WHERE id = $1
`

// ensure only one record is returned
func (q *Queries) MarkFeedFetched(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, markFeedFetched, id)
	return err
}
